"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WsapixChannel = void 0;
const events_1 = require("events");
const util_1 = require("util");
const types_1 = require("./types");
const transport_1 = require("./transport");
class WsapixChannel extends events_1.EventEmitter {
    /**
     * Channel constructor
     * @param path - channel path
     * @param options - channel options
     */
    constructor(path, options) {
        super();
        this.middlewares = [];
        this.hooks = new Map();
        /**
         * connected clients
         */
        this.clients = new Set();
        /**
         * Registered messages
         */
        this.messages = [];
        this.validatePayload = (schema, payload, error) => {
            if (this.validator) {
                return this.validator(schema, payload, (msg) => {
                    error(msg);
                });
            }
            return true;
        };
        if (typeof path === "object") {
            options = path;
            path = path.path;
        }
        this.path = path || "/";
        this.validator = options === null || options === void 0 ? void 0 : options.validator;
        this.messages = (options === null || options === void 0 ? void 0 : options.messages) || [];
        this._parser = (options === null || options === void 0 ? void 0 : options.parser) || "json";
        this._serializer = (options === null || options === void 0 ? void 0 : options.serializer) || "json";
    }
    on(event, listener) {
        return super.on(event, listener);
    }
    /**
     * Channel parser
     */
    get parser() {
        return this._parser === "json" ? JSON.parse : this._parser || ((data) => data);
    }
    /**
     * Channel serializer
     */
    get serializer() {
        return this._serializer === "json" ? JSON.stringify : this._serializer || ((data) => data);
    }
    /**
     * Register connection hook
     * @param middleware - connection hook
     */
    use(middleware) {
        this.middlewares.push(middleware);
    }
    /**
     * Register message hook
     * @param type - type of hook
     *
     * @param hook - hook handler
     */
    addHook(type, hook) {
        const hooks = this.hooks.get(type);
        if (!hooks) {
            this.hooks.set(type, [hook]);
        }
        else {
            this.hooks.set(type, [...hooks, hook]);
        }
    }
    runHook(type, client, data) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const hook of this.hooks.get(type) || []) {
                const asyncHook = util_1.promisify(hook);
                data = yield asyncHook(client, data);
            }
            return data;
        });
    }
    onConnect(client) {
        return __awaiter(this, void 0, void 0, function* () {
            const _send = client.send.bind(client);
            client.send = (data, cb) => __awaiter(this, void 0, void 0, function* () {
                try {
                    // execute hooks
                    if (this.validator !== undefined) {
                        // preValidation hook
                        data = yield this.runHook("preValidation", client, data);
                        const message = this.findServerMessage(data);
                        if (!message) {
                            const error = new Error("Cannot send message: Message schema not found");
                            cb && cb(error);
                            return Promise.reject(error);
                        }
                        let errorMessage = "";
                        if (message.schema && !this.validatePayload(message.schema.payload, data, (msg) => {
                            errorMessage = msg;
                            cb && cb(new Error(msg));
                        })) {
                            return Promise.reject(new Error("Cannot send message - payload validation error:\n" + errorMessage));
                        }
                    }
                    // preSerialization hook
                    data = yield this.runHook("preSerialization", client, data);
                    // encode message
                    data = this.serializer(data);
                    // preSend hook
                    data = yield this.runHook("preSerialization", client, data);
                    return _send(data, cb);
                }
                catch (error) {
                    cb && cb(error);
                    return Promise.reject(error);
                }
            });
            // execute midllwares
            for (const middleware of this.middlewares) {
                try {
                    yield middleware(client);
                }
                catch (error) {
                    throw error;
                }
                if (client.status === transport_1.ClientStatus.disconnecting || client.status === transport_1.ClientStatus.disconnected) {
                    return;
                }
            }
            this.clients.add(client);
            client.channel = this;
            this.emit("connect", client);
        });
    }
    onMessage(client, data) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // onMessage hook
                data = yield this.runHook("onMessage", client, data);
                // preParse hook
                data = yield this.runHook("preParse", client, data);
                try {
                    data = this.parser(data);
                }
                catch (error) {
                    this.emit("error", client, "Unexpected message payload", data);
                    return;
                }
                const message = this.findClientMessage(data);
                if (!message) {
                    this.emit("error", client, "Message not found", data);
                    return;
                }
                const { handler, schema } = message;
                if (!handler) {
                    this.emit("error", client, `Handler not implemented`, data);
                    return;
                }
                if (schema && this.validator !== undefined) {
                    data = yield this.runHook("preValidation", client, data);
                    if (!this.validatePayload(schema.payload, data, (msg) => {
                        this.emit("error", client, msg, data);
                    })) {
                        return;
                    }
                }
                data = yield this.runHook("preHandler", client, data);
                handler(client, data);
            }
            catch (error) {
                this.emit("error", client, "Unhandled error", data);
            }
        });
    }
    onDisconnect(client, code, data) {
        this.clients.delete(client);
        this.emit("disconnect", client, code, data);
    }
    serverMessage(matcher, schema) {
        this.messages.push({ kind: types_1.MessageKind.server, matcher, schema });
    }
    clientMessage(matcher, schema, handler) {
        if (typeof schema === "function") {
            handler = schema;
            schema = undefined;
        }
        this.messages.push({ kind: types_1.MessageKind.client, matcher, handler, schema });
    }
    /**
     * Find client message by payload
     * @param data - payload
     * @returns Message or undefined
     */
    findClientMessage(data) {
        return this.findMessage(types_1.MessageKind.client, data);
    }
    /**
     * Find server message by payload
     * @param data - message payload
     * @returns Message or undefined
     */
    findServerMessage(data) {
        return this.findMessage(types_1.MessageKind.server, data);
    }
    inherit(channel) {
        // set default channel parameters
        this._parser = this._parser || channel.parser;
        this._serializer = this._serializer || channel.serializer;
        this.validator = this.validator || channel.validator;
        // add middlwares and messages
        if (channel.path === "*") {
            this.middlewares = [...channel.middlewares, ...this.middlewares];
            this.messages.push(...channel.messages);
        }
        // forward events
        this.on("error", (client, data) => channel.emit("error", client, data));
        this.on("disconnect", (client) => channel.emit("disconnect", client));
    }
    findMessage(type, data) {
        return this.messages.find((msg) => {
            if (msg.kind !== type) {
                return false;
            }
            if (typeof msg.matcher === "function") {
                return msg.matcher(data);
            }
            else {
                let fields = Object.keys(msg.matcher).length;
                for (const key of Object.keys(msg.matcher)) {
                    fields -= data[key] === msg.matcher[key] ? 1 : 0;
                }
                return fields === 0;
            }
        });
    }
}
exports.WsapixChannel = WsapixChannel;
//# sourceMappingURL=data:application/json;base64,