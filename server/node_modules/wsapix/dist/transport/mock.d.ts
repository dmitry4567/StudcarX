import { Client, Transport } from '.';
export interface IClientInjectParams {
    connectionDelay?: number;
    headers?: {
        [key: string]: string | string[] | undefined;
    };
}
export declare enum ClientSocketState {
    CONNECTING = 0,
    OPEN = 1,
    CLOSING = 2,
    CLOSED = 3
}
export interface IClientSocket {
    readyState: ClientSocketState;
    onopen: (event: {
        type: "open";
    }) => void;
    onerror: (event: {
        type: "error";
        message: string;
        error: any;
    }) => void;
    onclose: (event: {
        type: "close";
        code: number;
        reason: any;
    }) => void;
    onmessage: (event: {
        type: "message";
        data: any;
    }) => void;
    close: (code?: number, reason?: string) => void;
    send: (data: any) => void;
}
export declare class MockTransport extends Transport {
    close(cb?: (error?: Error) => void): Promise<void>;
    inject(url?: string, params?: IClientInjectParams): IClientSocket;
}
export declare class MockClient extends Client {
    socket: IClientSocket;
    headers: {};
    private connectionDelay;
    constructor(socket: IClientSocket, url: string, headers?: {}, connectionDelay?: number);
    protected _send(data: any, cb?: (error?: Error) => void): Promise<void>;
    protected _terminate(code?: number, reason?: any): void;
}
