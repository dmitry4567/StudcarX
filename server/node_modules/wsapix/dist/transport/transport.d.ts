export declare enum ClientStatus {
    connecting = 0,
    connected = 1,
    disconnecting = 2,
    disconnected = 3
}
/**
 * Abstract client class
 */
export declare abstract class Client {
    /**
     * conection path
     */
    path?: string;
    /**
     * connection query
     */
    query?: string;
    /**
     * connection headers
     */
    headers: {
        [key: string]: string | string[] | undefined;
    };
    /**
     * client connection status
     */
    status: ClientStatus;
    /**
     * Send message to client
     * @param data - payload
     * @param cb - callback on error/complete
     * @returns promise
     */
    send(data: any, cb?: (error?: Error) => void): Promise<void>;
    /**
     * Terminate client connection
     * @param code - termination code
     * @param data - termination reason
     */
    terminate(code?: number, data?: any): void;
    protected abstract _send(data: any, cb?: (error?: Error) => void): Promise<void>;
    protected abstract _terminate(code?: number, data?: any): void;
}
/**
 * Abstarct class for Transport
 */
export declare abstract class Transport {
    protected handlers: any;
    /**
     * Register handler for client connection event
     * @param cb - connection handler
     */
    onConnection(cb: (client: Client) => void): void;
    /**
     * Register handler for client message event
     * @param cb - message handler
     */
    onMessage(cb: (client: Client, data: any) => void): void;
    /**
     * Register handler for client disconnection event
     * @param cb - disconnection handler
     */
    onDisconnect(cb: (client: Client, code?: number, data?: any) => void): void;
    /**
     * Register handler for error event
     * @param cb - error handler
     */
    onError(cb: (error: Error) => void): void;
    /**
     * @abstract
     * Gracefull shutdown
     * @param cb - error handler
     */
    abstract close(cb?: (error?: Error) => void): Promise<void>;
}
