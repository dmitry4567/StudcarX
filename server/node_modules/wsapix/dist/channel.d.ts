/// <reference types="node" />
import { EventEmitter } from 'events';
import { WsapixMessage, WsapixClient, MessageHandler, DataParser, MessageMatcher, ChannelOptions, MessageValidator, WsapixMiddleware } from './types';
import type { MessageSchema } from './asyncapi';
/**
 * Handler for event hook
 * @param client - client context
 * @param data - message payload
 * @param done - callback function on complete with update payload
 * @returns promise with updated payload
 */
declare type MessageHook = (client: WsapixClient, data: any, done: (err?: Error, value?: any) => void) => Promise<any>;
/**
 * Hooks are registered with the addHook method and allow you to listen to specific message events lifecycle.
 * `onMessage` - event on client messages
 * `preParse` - event before client message parsing
 * `preValidation` - event before client message validation
 * `preHandler` - event before client message handler execution
 * `preSerialization` - event before send message serialization
 * `preSend` - event before send message to client
 */
declare type HookType = "onMessage" | "preParse" | "preHandler" | "preValidation" | "preSerialization" | "preSend";
export declare class WsapixChannel<S = any> extends EventEmitter {
    private middlewares;
    private hooks;
    /**
     * connected clients
     */
    clients: Set<WsapixClient<S>>;
    /**
     * Registered messages
     */
    messages: WsapixMessage[];
    /**
     * Channel path
     */
    path: string;
    /**
     * Channel validator
     */
    validator?: MessageValidator;
    private _parser?;
    private _serializer?;
    /**
     * Handle client connection
     * @param event - `connect`
     * @param listener - Handler
     */
    on(event: "connect", listener: (client: WsapixClient<S>) => void): any;
    /**
     * Handle client diconnection
     * @param event - `disconnect`
     * @param listener - Handler
     */
    on(event: "disconnect", listener: (client: WsapixClient<S>, code?: number, data?: any) => void): any;
    /**
     * Handler for error
     * @param event - `error`
     * @param listener - Handler
     */
    on(event: "error", listener: (client: WsapixClient<S>, message: string, data?: any) => void): any;
    /**
     * Channel parser
     */
    get parser(): DataParser;
    /**
     * Channel serializer
     */
    get serializer(): DataParser;
    /**
     * Channel constructor
     * @param path - channel path
     * @param options - channel options
     */
    constructor(path?: string | ChannelOptions<S>, options?: ChannelOptions<S>);
    /**
     * Register connection hook
     * @param middleware - connection hook
     */
    use(middleware: WsapixMiddleware<S>): void;
    /**
     * Register message hook
     * @param type - type of hook
     *
     * @param hook - hook handler
     */
    addHook(type: HookType, hook: MessageHook): void;
    private runHook;
    protected onConnect(client: WsapixClient<S>): Promise<void>;
    protected onMessage(client: WsapixClient<S>, data: any): Promise<void>;
    protected onDisconnect(client: WsapixClient<S>, code?: number, data?: any): void;
    serverMessage(matcher: MessageMatcher, schema?: MessageSchema): void;
    clientMessage<T = any>(matcher: MessageMatcher, schema?: MessageSchema | MessageHandler<S, T>, handler?: MessageHandler<S, T>): void;
    /**
     * Find client message by payload
     * @param data - payload
     * @returns Message or undefined
     */
    findClientMessage(data: {
        [key: string]: any;
    }): WsapixMessage<any, any> | undefined;
    /**
     * Find server message by payload
     * @param data - message payload
     * @returns Message or undefined
     */
    findServerMessage(data: {
        [key: string]: any;
    }): WsapixMessage<S, any> | undefined;
    protected inherit(channel: WsapixChannel<S>): void;
    private findMessage;
    protected validatePayload: (schema: any, payload: any, error?: ((msg: string) => void) | undefined) => boolean;
}
export {};
