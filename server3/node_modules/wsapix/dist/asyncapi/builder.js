"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncApiBuilder = void 0;
class AsyncApiBuilder {
    constructor(params) {
        this.params = params;
        this.channels = new Map();
        this.messages = new Map();
        this.schemas = new Map();
        this.addSchemaRef = (schema) => {
            const { $id } = schema, data = __rest(schema, ["$id"]);
            if (data.type === "object") {
                Object.keys(schema.properties).forEach((key) => {
                    data.properties = Object.assign(Object.assign({}, data.properties), { [key]: this.addSchemaRef(schema.properties[key]) });
                });
            }
            else if (schema.type === "array") {
                data.items = this.addSchemaRef(schema.items);
            }
            if ($id) {
                this.schemas.set($id, data);
                return { $ref: `#/components/schemas/${$id}` };
            }
            return data;
        };
    }
    generate() {
        const map2obj = (map) => {
            const result = {};
            map.forEach((value, key) => result[key] = value);
            return result;
        };
        return JSON.stringify(Object.assign(Object.assign({ asyncapi: "2.0.0" }, this.params), { channels: map2obj(this.channels), components: {
                messages: map2obj(this.messages),
                schemas: map2obj(this.schemas)
            } }));
    }
    addChannel(name, pubMessages, subMessages, params) {
        this.channels.set(name, Object.assign(Object.assign({}, pubMessages.length ? { publish: {
                description: "Send messages to the server",
                message: Object.assign({}, pubMessages.length > 1 ? {
                    oneOf: pubMessages.map((msg) => this.addMessageRef(msg))
                } : this.addMessageRef(pubMessages[0]))
            } } : {}), subMessages.length ? { subscribe: {
                description: "Messages that you receive from the server",
                message: Object.assign({}, subMessages.length > 1 ? {
                    oneOf: subMessages.map((msg) => this.addMessageRef(msg))
                } : this.addMessageRef(subMessages[0]))
            } } : {}));
    }
    addMessageRef(msg) {
        const { $id } = msg, data = __rest(msg, ["$id"]);
        const payload = this.addSchemaRef(msg.payload);
        const message = Object.assign(Object.assign({}, data), { payload });
        if ($id) {
            this.messages.set($id, message);
        }
        return $id ? { $ref: `#/components/messages/${$id}` } : message;
    }
}
exports.AsyncApiBuilder = AsyncApiBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hc3luY2FwaS9idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBWUEsTUFBYSxlQUFlO0lBSzFCLFlBQW1CLE1BQThCO1FBQTlCLFdBQU0sR0FBTixNQUFNLENBQXdCO1FBSjFDLGFBQVEsR0FBeUIsSUFBSSxHQUFHLEVBQUUsQ0FBQTtRQUMxQyxhQUFRLEdBQXlCLElBQUksR0FBRyxFQUFFLENBQUE7UUFDMUMsWUFBTyxHQUE0QixJQUFJLEdBQUcsRUFBRSxDQUFBO1FBdUQzQyxpQkFBWSxHQUFHLENBQUMsTUFBa0IsRUFBaUIsRUFBRTtZQUMzRCxNQUFNLEVBQUUsR0FBRyxLQUFjLE1BQU0sRUFBZixJQUFJLFVBQUssTUFBTSxFQUF6QixPQUFnQixDQUFTLENBQUE7WUFDL0IsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtnQkFDMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUU7b0JBQ3JELElBQUksQ0FBQyxVQUFVLG1DQUNWLElBQUksQ0FBQyxVQUFVLEtBQ2xCLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQ2pELENBQUE7Z0JBQ0gsQ0FBQyxDQUFDLENBQUE7YUFDSDtpQkFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFO2dCQUNsQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO2FBQzdDO1lBQ0QsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFBO2dC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