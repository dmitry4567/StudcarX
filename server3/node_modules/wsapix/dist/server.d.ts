import type { TemplatedApp } from 'uWebSockets.js';
import type { ServerOptions } from 'ws';
import { Transport, WebsocketOptions } from './transport';
import { IAsyncApiBuilderParams } from './asyncapi';
import { ChannelOptions, WsapixClient } from './types';
import { WsapixChannel } from './channel';
/**
 * Wsapix extention
 * @param wsapix - wsapix instance
 */
export declare type WsapixPlugin<S> = (wsapi: Wsapix<S>) => Promise<void> | void;
export declare class Wsapix<S = any> extends WsapixChannel<S> {
    transport: Transport;
    /**
     * Map of registered routes
     */
    channels: Map<string, WsapixChannel<S>>;
    /**
     * Create Wsapix instance on Http server
     * @param options - Http server options
     * @param defaultOptions - channel options
     * @returns Wsapix instance
     */
    static WS<S = any>(options: ServerOptions, defaultOptions?: ChannelOptions<S>): Wsapix<S>;
    /**
     * Create Wsapix instance on uWebSockets server
     * @param options - uWebsocket server and options
     * @param defaultOptions - channel options
     * @returns Wsapix instance
     */
    static uWS<S = any>(options: {
        server: TemplatedApp;
    } & WebsocketOptions, defaultOptions?: ChannelOptions<S>): Wsapix<S>;
    /**
     * Wsapix constructor
     * @param transport - wsapix transport
     * @param defaultOptions - channel options
     */
    constructor(transport: Transport, defaultOptions?: ChannelOptions<S>);
    /**
     * Update wsapix transport
     * @param transport - wsapix transport
     */
    setTransport(transport: Transport): void;
    protected onConnected(client: WsapixClient<S>): Promise<void>;
    protected onMessage(client: WsapixClient<S>, data: any): Promise<void>;
    protected onDisconnect(client: WsapixClient<S>, code?: number, data?: any): void;
    /**
     * Generate AsyncApi specification in json format
     * @param params - AsyncApi specification parts (info, servers, defaultContentType, tags, externalDocs)
     * @returns AsyncApi documentation json
     */
    asyncapi(params: IAsyncApiBuilderParams): string;
    /**
     * @public
     * Generate HTML template for AsyncApi documentation
     * @param asyncApiPath - url for AsyncApi json file
     * @param title - Page title
     * @returns - HTML page
     */
    htmlDocTemplate(asyncApiPath: string, title?: string): string;
    /**
     * Find channel by url
     * @param url
     * @returns channel or undefined
     */
    findChannel(url?: string): WsapixChannel<S> | undefined;
    /**
     * Register route channel
     * @param path - route path or channel
     *
     * @example
     * Create new route
     * ```ts
     * const chat = wsx.route("/chat", { parser, serializer })
     * ```
     *
     * Register existing channel instance
     * ```ts
     * const chat = new WsapixChannel("/chat", { parser, serializer })
     * wsx.route(chat)
     * ```
     * Route path supports parameters:
     * @example
     * `/rooms/{id}`
     *
     * @param options - channel options
     * @returns Channel instance
     */
    route(path: string | WsapixChannel<S> | ChannelOptions<S>, options?: ChannelOptions<S>): WsapixChannel<S>;
    /**
     * Plug extension
     * @param plugin - Wsapix extention
     * @returns void
     */
    register(plugin: WsapixPlugin<S>): void | Promise<void>;
    /**
     * Gracefull shutdown
     * @param cb - Callback funxtion
     * @returns promise
     */
    close(cb?: (error?: Error) => void): Promise<void>;
}
