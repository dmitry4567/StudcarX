"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockClient = exports.MockTransport = exports.ClientSocketState = void 0;
const _1 = require(".");
const noop = () => { };
var ClientSocketState;
(function (ClientSocketState) {
    ClientSocketState[ClientSocketState["CONNECTING"] = 0] = "CONNECTING";
    ClientSocketState[ClientSocketState["OPEN"] = 1] = "OPEN";
    ClientSocketState[ClientSocketState["CLOSING"] = 2] = "CLOSING";
    ClientSocketState[ClientSocketState["CLOSED"] = 3] = "CLOSED";
})(ClientSocketState = exports.ClientSocketState || (exports.ClientSocketState = {}));
class MockTransport extends _1.Transport {
    close(cb) {
        return Promise.resolve(cb && cb());
    }
    inject(url = "/", params = {}) {
        const { headers, connectionDelay } = params, handlers = __rest(params, ["headers", "connectionDelay"]);
        const socket = {
            readyState: ClientSocketState.OPEN,
            onopen: noop,
            onerror: noop,
            onclose: noop,
            onmessage: noop,
            send: (data) => {
                this.handlers.message(client, data);
            },
            close: (code = 0, reason = "") => {
                client.status = _1.ClientStatus.disconnecting;
                setTimeout(() => {
                    this.handlers.disconnect(client, code, reason);
                    client.status = _1.ClientStatus.disconnected;
                }, connectionDelay);
            }
        };
        const client = new MockClient(socket, url, headers, connectionDelay);
        setTimeout(() => socket.onopen({ type: "open" }), connectionDelay);
        client.status = _1.ClientStatus.connected;
        this.handlers.connection(client);
        return socket;
    }
}
exports.MockTransport = MockTransport;
class MockClient extends _1.Client {
    constructor(socket, url, headers = {}, connectionDelay = 5) {
        super();
        this.socket = socket;
        this.headers = headers;
        this.connectionDelay = connectionDelay;
        const parsedUrl = new URL(url, "ws://localhost/");
        this.path = parsedUrl.pathname;
        this.query = parsedUrl.search.slice(1);
    }
    _send(data, cb) {
        return new Promise((resolve) => {
            setTimeout(() => {
                this.socket.onmessage({ type: "message", data });
                return resolve(cb && cb());
            }, this.connectionDelay);
        });
    }
    _terminate(code = 1006, reason) {
        this.socket.readyState = ClientSocketState.CLOSING;
        setTimeout(() => {
            this.socket.readyState = ClientSocketState.CLOSED;
            this.socket.onclose({ type: "close", code, reason });
        }, this.connectionDelay);
    }
}
exports.MockClient = MockClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc3BvcnQvbW9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLHdCQUFtRDtBQUVuRCxNQUFNLElBQUksR0FBRyxHQUFHLEVBQUUsR0FBUSxDQUFDLENBQUE7QUFPM0IsSUFBWSxpQkFLWDtBQUxELFdBQVksaUJBQWlCO0lBQzNCLHFFQUFjLENBQUE7SUFDZCx5REFBUSxDQUFBO0lBQ1IsK0RBQVcsQ0FBQTtJQUNYLDZEQUFVLENBQUE7QUFDWixDQUFDLEVBTFcsaUJBQWlCLEdBQWpCLHlCQUFpQixLQUFqQix5QkFBaUIsUUFLNUI7QUFhRCxNQUFhLGFBQWMsU0FBUSxZQUFTO0lBQ25DLEtBQUssQ0FBQyxFQUE0QjtRQUN2QyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDcEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFjLEdBQUcsRUFBRSxTQUE4QixFQUFFO1FBQy9ELE1BQU0sRUFBRSxPQUFPLEVBQUUsZUFBZSxLQUFrQixNQUFNLEVBQW5CLFFBQVEsVUFBSyxNQUFNLEVBQWxELDhCQUF5QyxDQUFTLENBQUE7UUFFeEQsTUFBTSxNQUFNLEdBQWtCO1lBQzVCLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1lBRWxDLE1BQU0sRUFBRSxJQUFJO1lBQ1osT0FBTyxFQUFFLElBQUk7WUFDYixPQUFPLEVBQUUsSUFBSTtZQUNiLFNBQVMsRUFBRSxJQUFJO1lBRWYsSUFBSSxFQUFFLENBQUMsSUFBUyxFQUFFLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQTtZQUNyQyxDQUFDO1lBRUQsS0FBSyxFQUFFLENBQUMsT0FBZSxDQUFDLEVBQUUsU0FBaUIsRUFBRSxFQUFFLEVBQUU7Z0JBQy9DLE1BQU0sQ0FBQyxN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