"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wsapix = void 0;
const transport_1 = require("./transport");
const asyncapi_1 = require("./asyncapi");
const types_1 = require("./types");
const channel_1 = require("./channel");
const template_1 = require("./template");
class Wsapix extends channel_1.WsapixChannel {
    /**
     * Wsapix constructor
     * @param transport - wsapix transport
     * @param defaultOptions - channel options
     */
    constructor(transport, defaultOptions) {
        super((defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.path) || "*", defaultOptions);
        this.transport = transport;
        /**
         * Map of registered routes
         */
        this.channels = new Map();
        this.setTransport(transport);
    }
    /**
     * Create Wsapix instance on Http server
     * @param options - Http server options
     * @param defaultOptions - channel options
     * @returns Wsapix instance
     */
    static WS(options, defaultOptions) {
        const transport = new transport_1.WebsocketTransport(options);
        return new Wsapix(transport, defaultOptions);
    }
    /**
     * Create Wsapix instance on uWebSockets server
     * @param options - uWebsocket server and options
     * @param defaultOptions - channel options
     * @returns Wsapix instance
     */
    static uWS(options, defaultOptions) {
        const transport = new transport_1.uWebsocketTransport(options);
        return new Wsapix(transport, defaultOptions);
    }
    /**
     * Update wsapix transport
     * @param transport - wsapix transport
     */
    setTransport(transport) {
        this.transport = transport;
        this.transport.onConnection(this.onConnected.bind(this));
        this.transport.onMessage(this.onMessage.bind(this));
        this.transport.onDisconnect(this.onDisconnect.bind(this));
        this.transport.onError((error) => this.emit("error", (error === null || error === void 0 ? void 0 : error.message) || ""));
    }
    onConnected(client) {
        const _super = Object.create(null, {
            onConnect: { get: () => super.onConnect }
        });
        return __awaiter(this, void 0, void 0, function* () {
            // check if channel exist
            const channel = this.findChannel(client.path);
            if (!channel) {
                return client.terminate(4000);
            }
            // handle client connection to channel
            _super.onConnect.call(channel, client);
        });
    }
    onMessage(client, data) {
        const _super = Object.create(null, {
            onMessage: { get: () => super.onMessage }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (!client.channel) {
                return;
            }
            return _super.onMessage.call(client.channel, client, data);
        });
    }
    onDisconnect(client, code, data) {
        if (!client.channel) {
            return;
        }
        super.onDisconnect.call(client.channel, client, code, data);
    }
    /**
     * Generate AsyncApi specification in json format
     * @param params - AsyncApi specification parts (info, servers, defaultContentType, tags, externalDocs)
     * @returns AsyncApi documentation json
     */
    asyncapi(params) {
        const asyncapi = new asyncapi_1.AsyncApiBuilder(params);
        const channels = [this, ...this.channels.values()];
        for (const channel of channels) {
            // parse path params
            const pathParams = {};
            // split pubsub messages
            const pubMessages = [];
            const subMessages = [];
            for (const msg of channel.messages) {
                if (!msg.schema) {
                    continue;
                }
                if (msg.kind === types_1.MessageKind.server) {
                    subMessages.push(msg.schema);
                }
                else {
                    pubMessages.push(msg.schema);
                }
            }
            // add channel
            asyncapi.addChannel(channel.path, pubMessages, subMessages, pathParams);
        }
        return asyncapi.generate();
    }
    /**
     * @public
     * Generate HTML template for AsyncApi documentation
     * @param asyncApiPath - url for AsyncApi json file
     * @param title - Page title
     * @returns - HTML page
     */
    htmlDocTemplate(asyncApiPath, title) {
        return template_1.html(asyncApiPath, title);
    }
    /**
     * Find channel by url
     * @param url
     * @returns channel or undefined
     */
    findChannel(url = "/") {
        const [path] = url.split("?");
        for (const [channelPath, channel] of this.channels) {
            const exp = new RegExp("\/" + channelPath
                .replace(/^\/+|\/+$/g, "")
                .split("/")
                .map((item) => item[0] === "{" && item.slice(-1) === "}" ? "[A-Za-z0-9_.\-]+" : item)
                .join("\/") + "$");
            if (exp.test(path)) {
                return channel;
            }
        }
        return (this.path === url || this.path === "*") ? this : this.channels.get("*");
    }
    /**
     * Register route channel
     * @param path - route path or channel
     *
     * @example
     * Create new route
     * ```ts
     * const chat = wsx.route("/chat", { parser, serializer })
     * ```
     *
     * Register existing channel instance
     * ```ts
     * const chat = new WsapixChannel("/chat", { parser, serializer })
     * wsx.route(chat)
     * ```
     * Route path supports parameters:
     * @example
     * `/rooms/{id}`
     *
     * @param options - channel options
     * @returns Channel instance
     */
    route(path, options) {
        // create channel
        const channel = path instanceof channel_1.WsapixChannel ? path : new channel_1.WsapixChannel(path, options);
        const channelPath = channel.path;
        if (channelPath === this.path || this.channels.has(channelPath)) {
            throw new Error(`Path '${channelPath}' already exist!`);
        }
        this.inherit.call(channel, this);
        this.channels.set(channelPath, channel);
        return channel;
    }
    /**
     * Plug extension
     * @param plugin - Wsapix extention
     * @returns void
     */
    register(plugin) {
        return plugin(this);
    }
    /**
     * Gracefull shutdown
     * @param cb - Callback funxtion
     * @returns promise
     */
    close(cb) {
        return this.transport.close(cb);
    }
}
exports.Wsapix = Wsapix;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFHQSwyQ0FBa0c7QUFDbEcseUNBQTZFO0FBQzdFLG1DQUFtRTtBQUNuRSx1Q0FBeUM7QUFDekMseUNBQWlDO0FBUWpDLE1BQWEsTUFBZ0IsU0FBUSx1QkFBZ0I7SUE0Qm5EOzs7O09BSUc7SUFDSCxZQUFvQixTQUFvQixFQUFFLGNBQWtDO1FBQzFFLEtBQUssQ0FBQyxDQUFBLGNBQWMsYUFBZCxjQUFjLHVCQUFkLGNBQWMsQ0FBRSxJQUFJLEtBQUksR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFBO1FBRGhDLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFoQ3hDOztXQUVHO1FBQ0ksYUFBUSxHQUFrQyxJQUFJLEdBQUcsRUFBRSxDQUFBO1FBK0J4RCxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQzlCLENBQUM7SUE5QkQ7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsRUFBRSxDQUFVLE9BQXNCLEVBQUUsY0FBa0M7UUFDM0UsTUFBTSxTQUFTLEdBQUcsSUFBSSw4QkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNqRCxPQUFPLElBQUksTUFBTSxDQUFJLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQTtJQUNqRCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsR0FBRyxDQUFVLE9BQW9ELEVBQUUsY0FBa0M7UUFDMUcsTUFBTSxTQUFTLEdBQUcsSUFBSSwrQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNsRCxPQUFPLElBQUksTUFBTSxDQUFJLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQTtJQUNqRCxDQUFDO0lBWUQ7OztPQUdHO0lBQ0ksWUFBWSxDQUFDLFNBQW9CO1FBQ3RDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1FBQzFCLElBQUksQ0FBQyxTQUFTLENB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